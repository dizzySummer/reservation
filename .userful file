https://stackoverflow.com/questions/60733143/how-to-get-python-decouple-to-work-on-a-live-server

From my findings I think there is just one way using every environment, either local and live server. First you need to install python-decouple library in conjunction with .env file as follows:

    Install Python-Decouple:

    pip install python-decouple

    Create a .env file in the root directorate of your project and follow this format to define your Environment Variables inside the file.

    SECRET_KEY = secret_key_for_app_you_may_use_code_to_it_unique

    DATABASE_NAME = name_of_your_database

    DATABASE_USER = your_database_username

    DATABASE_PASSWORD = your_database_password

Notice there are no quotation marks in the values for the variables. 3. Import the config method in settings.py and use it to call these variables as follows:

from decouple import config

Now Call the variables in the appropriate places using the config method

DATABASES = {
'default': {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': config('DATABASE_NAME'),
    'USER': config('DATABASE_USER'),
    'PASSWORD': config('DATABASE_PASS'),
    'HOST': 'localhost'
}
}
-------------------------------------------------
https://stackoverflow.com/questions/49235486/how-to-properly-runserver-on-different-settings-for-django

how to switch between different settings


config/
    commonsettings.py
    dev.py
    prod.py

make sure that in dev.py and prod.py you import everything from commonsettings.py like this:

from .commonsettings import * 

then if you want to run the dev.py settings:

python manage.py runserver --settings=config.dev

if you want to run prod.py:

python manage.py runserver --settings=config.prod

NOTE:

For more readable files many developers call their settings files: local.py (for the local settings) production.py (for the production settings) and base.py (the common settings for both)

Personally I place my setting files in:

config/
    settings/
        base.py
        local.py
        production.py
        test.py (For tests)



    <ul>
    {% for shift in shift_list ‰}
      <li><a href="/shifts/{{shift.id}}/">{{shift.date}}</a><li>
     {% endfor ‰}
    <ul>
{% else %}

 <p> No shift is available</p>




 login html passed part

<h2>Log In</h2>
<form method="post">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit">Log In</button>
</form>
