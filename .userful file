
# to do:

1. Set create_shift form initial value with user is an employer. So the employer could not create shift 
   on behalf of other employers. 









https://stackoverflow.com/questions/60733143/how-to-get-python-decouple-to-work-on-a-live-server

From my findings I think there is just one way using every environment, either local and live server. First you need to install python-decouple library in conjunction with .env file as follows:

    Install Python-Decouple:

    pip install python-decouple

    Create a .env file in the root directorate of your project and follow this format to define your Environment Variables inside the file.

    SECRET_KEY = secret_key_for_app_you_may_use_code_to_it_unique

    DATABASE_NAME = name_of_your_database

    DATABASE_USER = your_database_username

    DATABASE_PASSWORD = your_database_password

Notice there are no quotation marks in the values for the variables. 3. Import the config method in settings.py and use it to call these variables as follows:

from decouple import config

Now Call the variables in the appropriate places using the config method

DATABASES = {
'default': {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': config('DATABASE_NAME'),
    'USER': config('DATABASE_USER'),
    'PASSWORD': config('DATABASE_PASS'),
    'HOST': 'localhost'
}
}
-------------------------------------------------
https://stackoverflow.com/questions/49235486/how-to-properly-runserver-on-different-settings-for-django

how to switch between different settings


shift detail.html <td><a class="btn btn-sm btn-success" href="{% url 'reserve_shift' shift.id%}">reserve</a></td>


config/
    commonsettings.py
    dev.py
    prod.py

make sure that in dev.py and prod.py you import everything from commonsettings.py like this:

from .commonsettings import * 

then if you want to run the dev.py settings:

python manage.py runserver --settings=config.dev

if you want to run prod.py:

python manage.py runserver --settings=config.prod

NOTE:

For more readable files many developers call their settings files: local.py (for the local settings) production.py (for the production settings) and base.py (the common settings for both)

Personally I place my setting files in:

config/
    settings/
        base.py
        local.py
        production.py
        test.py (For tests)



    <ul>
    {% for shift in shift_list ‰}
      <li><a href="/shifts/{{shift.id}}/">{{shift.date}}</a><li>
     {% endfor ‰}
    <ul>
{% else %}

 <p> No shift is available</p>




 login html passed part

<h2>Log In</h2>
<form method="post">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit">Log In</button>
</form>

profile.html line 9  {% if user.id == form.instance.id %}
and profile view 219 user=request.user without it, a user could update other user's profile



# reserve one shift and then redirect to all reversed_shifts list view
@login_required #here employee reserves that offered jobs on job list
def reserve_shift(request, pk):
    
    shift = Shift.objects.get(id=pk)
    if request.method == 'GET':
        shift.user = request.user
        shift.status = 'Reserved'
        shift.time_reserved = datetime.datetime.now()
        shift.save()
    return redirect('reserved_shifts')


#list all reserved shifts by that employee


@login_required 
def reversed_shifts(request):
    shifts=Shift.objects.filter(user=request.user)
    context = {'reserved_shifts': shifts}
    return render(request,'reserved_shifts.html', context=context)


def error_404_view(request, exception):
    return render(request, 'core/404.html')


#search results from a single model (if wants to get results from multiple models, use chain method)


@login_required 
def search(request):
    query = request.GET.get('query')
    if not query:
        
        return HttpResponse("There is no result")
    
    else:

        search_results = CustomUser.objects.filter(
             Q(last_name__icontains=query)
        )

        context = {
            'search_results': search_results,
            'query': query,
        }
        return render(request, 'search.html', context)





""
        widgets = {
            'shift_date': DateInput(),
            'start_time':TimeInput(),
            'finish_time':TimeInput(),
        }
        """
        widgets = {
            'shift_date': DateInput(),
            'start_time':TimeInput(),
            'finish_time':TimeInput(),
        }
        """

        

        
    def clean(self):

            cleaned_data = super(ShiftForm,self).clean()
            shift_date = cleaned_data['shift_date']
            print(shift_date)

           
            start_time = cleaned_data['start_time']
           
            finish_time = cleaned_data['finish_time']
            current_date =datetime.now(tz=pytz.timezone('UTC'))
        
            if shift_date is not None and shift_date < current_date:   
                raise ValidationError("""shift_date should not be ealier than current_date""")

            elif shift_date == current_date:
                print("shift_date is:",shift_date)
                if start_time is not None and start_time < current_time: 
                    raise ValidationError("""start_time can not be ealier than current_time""")

            else:
                if finish_time is not None and finish_time < start_time : 
                    raise ValidationError("finish_time can not be earlier than start time") 

            return cleaned_data                                                    
            








 def clean(self):

        cleaned_data = super(ShiftForm,self).clean()
        shift_date = cleaned_data['shift_date']
        print(shift_date)

       
        start_time = cleaned_data['start_time']
       
        finish_time = cleaned_data['finish_time']
        current_date =datetime.now(tz=pytz.timezone('UTC'))
    
        if shift_date is not None and shift_date < current_date:   
            raise ValidationError("""shift_date should not be ealier than current_date""")

        elif shift_date == current_date:
            print("shift_date is:",shift_date)
            if start_time is not None and start_time < current_time: 
                raise ValidationError("""start_time can not be ealier than current_time""")

        else:
            if finish_time is not None and finish_time < start_time : 
                raise ValidationError("finish_time can not be earlier than start time") 

        return cleaned_data       


"""


"""
    widgets = {
            'shift_date': DateInput(),
            'start_time':TimeInput(),
            'finish_time':TimeInput(),
        }
        
     """ 







